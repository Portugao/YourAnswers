<?php
/**
 * YourAnswers.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace MU\YourAnswersModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Translatable\Translatable;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\YourAnswersModule\Traits\StandardFieldsTrait;
use MU\YourAnswersModule\Validator\Constraints as YourAnswersAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for question entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractQuestionEntity extends EntityAccess implements Translatable
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'question';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @YourAnswersAssert\ListEntry(entityName="question", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $subject
     */
    protected $subject = '';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=6000)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="6000")
     * @var text $textOfQuestion
     */
    protected $textOfQuestion = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @Assert\Locale()
     * @var string $forLanguage
     */
    protected $forLanguage = '';
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @Assert\DateTime()
     * @var DateTime $startDate
     */
    protected $startDate;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @Assert\DateTime()
     * @Assert\Expression("!value or value > this.getStartDate()", message="The start must be before the end.")
     * @var DateTime $endDate
     */
    protected $endDate;
    
    
    /**
     * Used locale to override Translation listener's locale.
     * This is not a mapped field of entity metadata, just a simple property.
     *
     * @Assert\Locale()
     * @Gedmo\Locale
     * @var string $locale
     */
    protected $locale;
    
    /**
     * Bidirectional - One question [question] has many answers [answers] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\YourAnswersModule\Entity\AnswerEntity", mappedBy="question")
     * @ORM\JoinTable(name="mu_youranswers_questionanswers")
     * @ORM\OrderBy({"createdDate" = "DESC"})
     * @var \MU\YourAnswersModule\Entity\AnswerEntity[] $answers
     */
    protected $answers = null;
    
    
    /**
     * QuestionEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->answers = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = isset($_objectType) ? $_objectType : '';
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the subject.
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->subject;
    }
    
    /**
     * Sets the subject.
     *
     * @param string $subject
     *
     * @return void
     */
    public function setSubject($subject)
    {
        if ($this->subject !== $subject) {
            $this->subject = isset($subject) ? $subject : '';
        }
    }
    
    /**
     * Returns the text of question.
     *
     * @return text
     */
    public function getTextOfQuestion()
    {
        return $this->textOfQuestion;
    }
    
    /**
     * Sets the text of question.
     *
     * @param text $textOfQuestion
     *
     * @return void
     */
    public function setTextOfQuestion($textOfQuestion)
    {
        if ($this->textOfQuestion !== $textOfQuestion) {
            $this->textOfQuestion = isset($textOfQuestion) ? $textOfQuestion : '';
        }
    }
    
    /**
     * Returns the for language.
     *
     * @return string
     */
    public function getForLanguage()
    {
        return $this->forLanguage;
    }
    
    /**
     * Sets the for language.
     *
     * @param string $forLanguage
     *
     * @return void
     */
    public function setForLanguage($forLanguage)
    {
        if ($this->forLanguage !== $forLanguage) {
            $this->forLanguage = isset($forLanguage) ? $forLanguage : '';
        }
    }
    
    /**
     * Returns the start date.
     *
     * @return DateTime
     */
    public function getStartDate()
    {
        return $this->startDate;
    }
    
    /**
     * Sets the start date.
     *
     * @param DateTime $startDate
     *
     * @return void
     */
    public function setStartDate($startDate)
    {
        if ($this->startDate !== $startDate) {
            if (!(null == $startDate && empty($startDate)) && !(is_object($startDate) && $startDate instanceOf \DateTimeInterface)) {
                $startDate = new \DateTime($startDate);
            }
            
            if ($this->startDate != $startDate) {
                $this->startDate = $startDate;
            }
        }
    }
    
    /**
     * Returns the end date.
     *
     * @return DateTime
     */
    public function getEndDate()
    {
        return $this->endDate;
    }
    
    /**
     * Sets the end date.
     *
     * @param DateTime $endDate
     *
     * @return void
     */
    public function setEndDate($endDate)
    {
        if ($this->endDate !== $endDate) {
            if (!(null == $endDate && empty($endDate)) && !(is_object($endDate) && $endDate instanceOf \DateTimeInterface)) {
                $endDate = new \DateTime($endDate);
            }
            
            if ($this->endDate != $endDate) {
                $this->endDate = $endDate;
            }
        }
    }
    
    /**
     * Returns the locale.
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }
    
    /**
     * Sets the locale.
     *
     * @param string $locale
     *
     * @return void
     */
    public function setLocale($locale)
    {
        if ($this->locale != $locale) {
            $this->locale = $locale;
        }
    }
    
    
    /**
     * Returns the answers.
     *
     * @return \MU\YourAnswersModule\Entity\AnswerEntity[]
     */
    public function getAnswers()
    {
        return $this->answers;
    }
    
    /**
     * Sets the answers.
     *
     * @param \MU\YourAnswersModule\Entity\AnswerEntity[] $answers
     *
     * @return void
     */
    public function setAnswers($answers)
    {
        foreach ($this->answers as $answerSingle) {
            $this->removeAnswers($answerSingle);
        }
        foreach ($answers as $answerSingle) {
            $this->addAnswers($answerSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\YourAnswersModule\Entity\AnswerEntity to the list of answers.
     *
     * @param \MU\YourAnswersModule\Entity\AnswerEntity $answer The instance to be added to the collection
     *
     * @return void
     */
    public function addAnswers(\MU\YourAnswersModule\Entity\AnswerEntity $answer)
    {
        $this->answers->add($answer);
        $answer->setQuestion($this);
    }
    
    /**
     * Removes an instance of \MU\YourAnswersModule\Entity\AnswerEntity from the list of answers.
     *
     * @param \MU\YourAnswersModule\Entity\AnswerEntity $answer The instance to be removed from the collection
     *
     * @return void
     */
    public function removeAnswers(\MU\YourAnswersModule\Entity\AnswerEntity $answer)
    {
        $this->answers->removeElement($answer);
        $answer->setQuestion(null);
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array List of resulting arguments
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muyouranswersmodule.ui_hooks.questions';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects Objects that are added to this array
     * 
     * @return array List of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = [])
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Question ' . $this->getKey() . ': ' . $this->getSubject();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
