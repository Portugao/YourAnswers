<?php
/**
 * YourAnswers.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace MU\YourAnswersModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\YourAnswersModule\Traits\StandardFieldsTrait;
use MU\YourAnswersModule\Validator\Constraints as YourAnswersAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for answer entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractAnswerEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'answer';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @YourAnswersAssert\ListEntry(entityName="answer", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $name
     */
    protected $name = 'Gast';
    
    /**
     * @ORM\Column(type="text", length=10000)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="10000")
     * @var text $textOfAnswer
     */
    protected $textOfAnswer = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="2000")
     * @var text $content
     */
    protected $content = '';
    
    /**
     * Using this form you agree to saving the entered text (privacy police)
     *
     * @ORM\Column(type="boolean")
     * @Assert\IsTrue(message="This option is mandatory.")
     * @Assert\Type(type="bool")
     * @var boolean $readPrivacy
     */
    protected $readPrivacy = false;
    
    
    /**
     * Bidirectional - Many answers [answers] are linked by one question [question] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MU\YourAnswersModule\Entity\QuestionEntity", inversedBy="answers")
     * @ORM\JoinTable(name="mu_youranswers_question")
     * @Assert\Type(type="MU\YourAnswersModule\Entity\QuestionEntity")
     * @var \MU\YourAnswersModule\Entity\QuestionEntity $question
     */
    protected $question;
    
    
    /**
     * AnswerEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = isset($_objectType) ? $_objectType : '';
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Sets the name.
     *
     * @param string $name
     *
     * @return void
     */
    public function setName($name)
    {
        if ($this->name !== $name) {
            $this->name = isset($name) ? $name : '';
        }
    }
    
    /**
     * Returns the text of answer.
     *
     * @return text
     */
    public function getTextOfAnswer()
    {
        return $this->textOfAnswer;
    }
    
    /**
     * Sets the text of answer.
     *
     * @param text $textOfAnswer
     *
     * @return void
     */
    public function setTextOfAnswer($textOfAnswer)
    {
        if ($this->textOfAnswer !== $textOfAnswer) {
            $this->textOfAnswer = isset($textOfAnswer) ? $textOfAnswer : '';
        }
    }
    
    /**
     * Returns the content.
     *
     * @return text
     */
    public function getContent()
    {
        return $this->content;
    }
    
    /**
     * Sets the content.
     *
     * @param text $content
     *
     * @return void
     */
    public function setContent($content)
    {
        if ($this->content !== $content) {
            $this->content = isset($content) ? $content : '';
        }
    }
    
    /**
     * Returns the read privacy.
     *
     * @return boolean
     */
    public function getReadPrivacy()
    {
        return $this->readPrivacy;
    }
    
    /**
     * Sets the read privacy.
     *
     * @param boolean $readPrivacy
     *
     * @return void
     */
    public function setReadPrivacy($readPrivacy)
    {
        if (boolval($this->readPrivacy) !== boolval($readPrivacy)) {
            $this->readPrivacy = boolval($readPrivacy);
        }
    }
    
    
    /**
     * Returns the question.
     *
     * @return \MU\YourAnswersModule\Entity\QuestionEntity
     */
    public function getQuestion()
    {
        return $this->question;
    }
    
    /**
     * Sets the question.
     *
     * @param \MU\YourAnswersModule\Entity\QuestionEntity $question
     *
     * @return void
     */
    public function setQuestion($question = null)
    {
        $this->question = $question;
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array List of resulting arguments
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muyouranswersmodule.ui_hooks.answers';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects Objects that are added to this array
     * 
     * @return array List of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = [])
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Answer ' . $this->getKey() . ': ' . $this->getName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
